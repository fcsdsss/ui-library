local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local TextService = game:GetService("TextService")
local GuiService = game:GetService("GuiService")
local RunService = game:GetService("RunService")
local PlayerService = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

local GuiInset = GuiService:GetGuiInset()
local LocalPlayer = PlayerService.LocalPlayer

-- TODO: Use Self when available (?)
-- TODO: Benchmark rawget and table[key] in proxify
-- TODO: Rewrite dropdown options

local Bracket = {
	Screen = nil,
	IsLocal = not identifyexecutor,
	IsMobile = UserInputService.TouchEnabled and not UserInputService.MouseEnabled,
	Elements = {},
	Windows = {},
	Flags = {},

	SectionInclude = {
		"Divider",
		"Label",
		"Button",
		"Toggle",
		"Slider",
		"Textbox",
		"Keybind",
		"Dropdown",
		"Colorpicker"
	}
}

Bracket.Utilities = {
	TableToColor = function(Table)
		if type(Table) ~= "table" then return Table end
		return Color3.fromHSV(Table[1], Table[2], Table[3])
	end,
	ColorToString = function(Color)
		return ("%i, %i, %i"):format(Color.R * 255, Color.G * 255, Color.B * 255)
	end,
	Scale = function(Value, InputMin, InputMax, OutputMin, OutputMax)
		return OutputMin + (Value - InputMin) * (OutputMax - OutputMin) / (InputMax - InputMin)
	end,
	DeepCopy = function(Self, Original)
		if type(Original) ~= "table" then return Original end
		local Copy = {}

		for Index, Value in pairs(Original) do
			if type(Value) == "table" then
				Value = Self:DeepCopy(Value)
			end

			Copy[Index] = Value
		end

		return Copy
	end,
	DeepEquals = function(Self, Object1, Object2)
		if Object1 == Object2 then return true end

		local Object1Type = type(Object1)
		local Object2Type = type(Object2)

		if Object1Type ~= Object2Type then return false end
		if Object1Type ~= "table" then return false end

		local KeySet = {}

		for Key1, Value1 in Object1 do
			local Value2 = Object2[Key1]

			if Value2 == nil or Self:DeepEquals(Value1, Value2) == false then
				return false
			end

			KeySet[Key1] = true
		end

		for Key2 in Object2 do
			if not KeySet[Key2] then
				return false
			end
		end

		return true
	end,
	NoOverwriteProxify = function(Table, Elements)
		local Proxy, Exclude = {}, {}

		local function IncrementKey(BaseKey)
			local Suffix = 1
			local NewKey = `{BaseKey}-{Suffix}`

			while Proxy[NewKey] ~= nil do
				Suffix += 1
				NewKey = `{BaseKey}-{Suffix}`
			end

			return NewKey
		end

		setmetatable(Table, {
			__index = function(Self, Key)
				return Proxy[Key]
			end,
			__newindex = function(Self, Key, Value)
				local Element = Elements[#Elements]
				if Proxy[Key] ~= nil and not table.find(Exclude, Element) then
					local Element = Elements[#Elements]
					local IncrementedKey = IncrementKey(Key)

					if Element.Flag then Element.Flag = IncrementedKey end
					table.insert(Exclude, Element)

					warn(`Flag {Key} already exists. Renaming to {IncrementedKey}`)
					Proxy[IncrementedKey] = Value
					return
				else
					table.insert(Exclude, Element)
					Proxy[Key] = Value
					return
				end
			end
		})
	end,
	Proxify = function(Table)
		local Proxy, Events = {}, {}
		--local ChangedEvent = Instance.new("BindableEvent")
		--Proxy.Changed = ChangedEvent.Event
		Proxy.Internal = Table

		function Proxy:GetPropertyChangedSignal(Property)
			local PropertyEvent = Instance.new("BindableEvent")

			Events[Property] = Events[Property] or {}
			table.insert(Events[Property], PropertyEvent)

			return PropertyEvent.Event
		end

		setmetatable(Proxy, {
			__index = function(Self, Key)
				return Table[Key]
			end,
			__newindex = function(Self, Key, Value)
				local OldValue = Table[Key]
				Table[Key] = Value

				--ChangedEvent:Fire(Key, Value, OldValue)
				if Events[Key] then
					for Index, Event in ipairs(Events[Key]) do
						Event:Fire(Value, OldValue)
					end
				end
			end
		})

		return Proxy
	end,
	GetType = function(Self, Object, Type, Default, UseProxy)
		if typeof(Object) == Type then
			return UseProxy and Self.Proxify(Object) or Object
		end

		return UseProxy and Self.Proxify(Default) or Default
	end,
	GetTextBounds = function(Text, Font, Size)
		return TextService:GetTextSize(Text, Size.Y, Font, Vector2.new(Size.X, 1e6))
	end,
    ---[修复] 重写拖拽逻辑，解决坐标跳动问题
	MakeDraggable = function(Dragger, Object, OnChange, OnEnd)
		local isDragging = false
		local dragStartOffset

		Dragger.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
				isDragging = true
				dragStartOffset = Input.Position - Object.AbsolutePosition
				-- 阻止其他UI元素响应此输入
				return Enum.ContextActionResult.Sink
			end
		end)

		UserInputService.InputChanged:Connect(function(Input)
			if isDragging and (Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch) then
				local newPosition = Input.Position - dragStartOffset
				local newUDim2 = UDim2.fromOffset(newPosition.X, newPosition.Y)
				
				if OnChange then 
					OnChange(newUDim2)
				else
					Object.Position = newUDim2
				end
			end
		end)
		
		Dragger.InputEnded:Connect(function(Input)
			if isDragging and (Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch) then
				isDragging = false
				if OnEnd then OnEnd() end
			end
		end)
	end,
	MakeResizeable = function(Dragger, Object, MinSize, MaxSize, OnChange, OnEnd)
		local StartSize, StartInputPosition = nil, nil

		Dragger.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
				StartSize = Object.AbsoluteSize
				StartInputPosition = Input.Position
			end
		end)
		UserInputService.InputChanged:Connect(function(Input)
			if StartSize and (Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch) then
				local Delta = Input.Position - StartInputPosition
				local Size = StartSize + Vector2.new(Delta.X, Delta.Y)

				local SizeX = math.max(MinSize.X, Size.X)
				-- SizeX = math.min(MaxSize.X, Size.X)

				local SizeY = math.max(MinSize.Y, Size.Y)
				-- SizeY = math.min(MaxSize.Y, Size.Y)

				OnChange(UDim2.fromOffset(SizeX, SizeY))
			end
		end)
		Dragger.InputEnded:Connect(function(Input)
			if StartSize and (Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch) then
				if OnEnd then OnEnd(Object.Size, StartSize) end
				StartSize, StartInputPosition = nil, nil
			end
		end)
	end,
	ClosePopUps = function()
		for Index, Object in pairs(Bracket.Screen:GetChildren()) do
			if Object.Name == "OptionContainer" or Object.Name == "Palette" then
				Object.Visible = false
			end
		end
	end,
	ChooseTab = function(WindowInstance, TabButtonInstance, TabInstance)
		for Index, Object in pairs(Bracket.Screen:GetChildren()) do
			if Object.Name == "OptionContainer" or Object.Name == "Palette" then
				Object.Visible = false
			end
		end
		for Index, Object in pairs(WindowInstance.TabContainer:GetChildren()) do
			if Object:IsA("ScrollingFrame") then
				Object.Visible = Object == TabInstance
			end
		end
		for Index, Object in pairs(WindowInstance.TabButtonContainer:GetChildren()) do
			if Object:IsA("TextButton") then
				Object.Highlight.Visible = Object == TabButtonInstance
			end
		end
	end,
	ChooseTabLegacy = function(WindowInstance, TabButtonInstance, TabInstance)
		for Index, Object in pairs(Bracket.Screen:GetChildren()) do
			if Object.Name == "OptionContainer" or Object.Name == "Palette" then
				Object.Visible = false
			end
		end
		for Index, Object in pairs(WindowInstance.TabContainer:GetChildren()) do
			if Object:IsA("ScrollingFrame") then
				Object.Visible = Object == TabInstance
			end
		end
		for Index, Object in pairs(WindowInstance.TabButtonContainer:GetChildren()) do
			if Object:IsA("TextButton") then
				Object.BackgroundTransparency = (Object == TabButtonInstance) and 0 or 1
			end
		end
	end,
	GetNumberOfTabs = function(WindowInstance)
		local NumberOfTabs = 0

		for Index, Object in pairs(WindowInstance.TabContainer:GetChildren()) do
			if Object:IsA("ScrollingFrame") then
				NumberOfTabs = NumberOfTabs + 1
			end
		end

		return NumberOfTabs
	end,
	GetLongestSide = function(TabInstance)
		local LeftSide = TabInstance.LeftSide
		local RightSide = TabInstance.RightSide
		local LeftSideSize = LeftSide.ListLayout.AbsoluteContentSize.Y
		local RightSideSize = RightSide.ListLayout.AbsoluteContentSize.Y
		return LeftSideSize >= RightSideSize and LeftSide or RightSide
	end,
	GetShortestSide = function(TabInstance)
		local LeftSide = TabInstance.LeftSide
		local RightSide = TabInstance.RightSide
		local LeftSideSize = LeftSide.ListLayout.AbsoluteContentSize.Y
		local RightSideSize = RightSide.ListLayout.AbsoluteContentSize.Y
		return LeftSideSize <= RightSideSize and LeftSide or RightSide
	end,
	ChooseTabSide = function(Self, TabInstance, Mode)
		if Mode == "Left" then
			return TabInstance.LeftSide
		elseif Mode == "Right" then
			return TabInstance.RightSide
		else
			return Self.GetShortestSide(TabInstance)
		end
	end,
	IsWindowsVisible = function(Self)
		for Index, Element in pairs(Self.Windows) do
			if Element.Enabled then
				return true
			end
		end
	end,
	FindLastElementWithType = function(Self, Type)
		for Index = #Self.Elements, 1, -1 do
			local Element = Self.Elements[Index]
			if Element.Type == Type then
				return Element
			end
		end
	end,
	FindElementByFlag = function(Self, Flag)
		for Index, Element in pairs(Self.Elements) do
			if Element.Flag and Element.Flag == Flag then
				return Element
			end
		end
	end,
	GetConfigs = function(FolderName)
		if not isfolder(FolderName) then makefolder(FolderName) end
		if not isfolder(`{FolderName}\\Configs`) then makefolder(`{FolderName}\\Configs`) end

		local Configs = {}
		for Index, Config in pairs(listfiles(`{FolderName}\\Configs`) or {}) do
			Config = Config:gsub(`{FolderName}\\Configs\\`, "")
			Config = Config:gsub(".json", "")

			Configs[#Configs + 1] = Config
		end

		return Configs
	end,
	ConfigsToList = function(FolderName)
		if not isfolder(FolderName) then makefolder(FolderName) end
		if not isfolder(`{FolderName}\\Configs`) then makefolder(`{FolderName}\\Configs`) end
		if not isfile(`{FolderName}\\Autoloads.json`) then writefile(`{FolderName}\\Autoloads.json`, "[]") end

		local Autoloads = HttpService:JSONDecode(readfile(`{FolderName}\\Autoloads.json`))
		local Autoload = Autoloads[tostring(game.GameId)]

		local Configs = {}
		for Index, Config in pairs(listfiles(`{FolderName}\\Configs`) or {}) do
			Config = Config:gsub(`{FolderName}\\Configs\\`, "")
			Config = Config:gsub(".json", "")

			Configs[#Configs + 1] = {
				Name = Config,
				Mode = "Button",
				Value = Config == Autoload
			}
		end

		return Configs
	end
}
Bracket.Instances = {
	Screen = function(Self)
		local Screen = Instance.new("ScreenGui")
		Screen.Name = "Bracket"
		Screen.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
		Screen.ResetOnSpawn = false
		Screen.ScreenInsets = Enum.ScreenInsets.DeviceSafeInsets
		Screen.IgnoreGuiInset = true
		Screen.DisplayOrder = Bracket.IsLocal and 0 or 10

		-- local Cursor = Self.Cursor()
		-- Cursor.Parent = Screen

		-- local Watermark = Self.Watermark()
		-- Watermark.Parent = Screen

		-- Push Notification Container
		local PNContainer = Self.PNContainer()
		PNContainer.Parent = Screen

		-- Toast Notification Container
		local TNContainer = Self.TNContainer()
		TNContainer.Parent = Screen

		-- local KeybindList = Self.KeybindList()
		-- KeybindList.Parent = Screen

		return Screen
	end,
	Cursor = function()
		local Cursor = Instance.new("ImageLabel")
		Cursor.Name = "Cursor"
		Cursor.ZIndex = 7
		Cursor.Visible = false
		Cursor.Size = UDim2.new(0, 64, 0, 64)
		Cursor.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Cursor.BackgroundTransparency = 1
		Cursor.BorderSizePixel = 0
		Cursor.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Cursor.ScaleType = Enum.ScaleType.Fit
		Cursor.Image = "rbxasset://textures/ArrowCursor.png"

		return Cursor
	end,
	Tooltip = function()
		local Tooltip = Instance.new("TextLabel")
		Tooltip.Name = "Tooltip"
		Tooltip.ZIndex = 6
		Tooltip.Visible = false
		Tooltip.AnchorPoint = Vector2.new(0, 1)
		Tooltip.Size = UDim2.new(0, 45, 0, 18)
		Tooltip.BorderColor3 = Color3.fromRGB(63, 63, 63)
		Tooltip.Position = UDim2.new(0, 50, 0, 50)
		Tooltip.BackgroundColor3 = Color3.fromRGB(31, 31, 31)
		Tooltip.TextStrokeTransparency = 0.75
		Tooltip.TextSize = 14
		Tooltip.RichText = true
		Tooltip.TextColor3 = Color3.fromRGB(255, 255, 255)
		-- Tooltip.TextYAlignment = Enum.TextYAlignment.Top
		Tooltip.Text = "Tooltip"
		Tooltip.FontFace = Font.fromEnum(Enum.Font.SourceSans)

		return Tooltip
	end,
	Watermark = function()
		local Watermark = Instance.new("TextLabel")
		Watermark.Name = "Watermark"
		Watermark.Visible = false
		Watermark.AnchorPoint = Vector2.new(1, 0)
		Watermark.Size = UDim2.new(0, 61, 0, 18)
		Watermark.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Watermark.Position = UDim2.new(1, -18, 0, 18)
		Watermark.BorderSizePixel = 2
		Watermark.BackgroundColor3 = Color3.fromRGB(31, 31, 31)
		Watermark.TextStrokeTransparency = 0.75
		Watermark.TextSize = 14
		Watermark.RichText = true
		Watermark.TextColor3 = Color3.fromRGB(255, 255, 255)
		-- Watermark.TextYAlignment = Enum.TextYAlignment.Top
		Watermark.Text = "Watermark"
		Watermark.FontFace = Font.fromEnum(Enum.Font.SourceSansSemibold)

		local Stroke = Instance.new("UIStroke")
		Stroke.Name = "Stroke"
		Stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		Stroke.LineJoinMode = Enum.LineJoinMode.Miter
		Stroke.Color = Color3.fromRGB(63, 63, 63)
		Stroke.Parent = Watermark

		return Watermark
	end,
	PNContainer = function()
		local PNContainer = Instance.new("Frame")
		PNContainer.Name = "PNContainer"
		PNContainer.ZIndex = 5
		PNContainer.AnchorPoint = Vector2.new(0.5, 0.5)
		PNContainer.Size = UDim2.new(1, 0, 1, 0)
		PNContainer.BorderColor3 = Color3.fromRGB(0, 0, 0)
		PNContainer.BackgroundTransparency = 1
		PNContainer.Position = UDim2.new(0.5, 0, 0.5, 0)
		PNContainer.BorderSizePixel = 0
		PNContainer.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

		local ListLayout = Instance.new("UIListLayout")
		ListLayout.Name = "ListLayout"
		ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
		ListLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
		ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		ListLayout.Padding = UDim.new(0, 12)
		ListLayout.Parent = PNContainer

		local Padding = Instance.new("UIPadding")
		Padding.Name = "Padding"
		Padding.PaddingTop = UDim.new(0, 10)
		Padding.PaddingBottom = UDim.new(0, 10)
		Padding.PaddingLeft = UDim.new(0, 10)
		Padding.PaddingRight = UDim.new(0, 10)
		Padding.Parent = PNContainer


		return PNContainer
	end,
	TNContainer = function()
		local TNContainer = Instance.new("Frame")
		TNContainer.Name = "TNContainer"
		TNContainer.ZIndex = 5
		TNContainer.AnchorPoint = Vector2.new(0.5, 0.5)
		TNContainer.Size = UDim2.new(1, 0, 1, 0)
		TNContainer.BorderColor3 = Color3.fromRGB(0, 0, 0)
		TNContainer.BackgroundTransparency = 1
		TNContainer.Position = UDim2.new(0.5, 0, 0.5, 0)
		TNContainer.BorderSizePixel = 0
		TNContainer.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

		local ListLayout = Instance.new("UIListLayout")
		ListLayout.Name = "ListLayout"
		ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		ListLayout.Padding = UDim.new(0, 5)
		ListLayout.Parent = TNContainer

		local Padding = Instance.new("UIPadding")
		Padding.Name = "Padding"
		Padding.PaddingTop = UDim.new(0, 39)
		Padding.PaddingBottom = UDim.new(0, 10)
		Padding.Parent = TNContainer

		return TNContainer
	end,
	KeybindList = function()
		local KeybindList = Instance.new("Frame")
		KeybindList.Name = "KeybindList"
		KeybindList.ZIndex = 2
		KeybindList.Visible = false
		KeybindList.Size = UDim2.new(0, 121, 0, 246)
		KeybindList.BorderColor3 = Color3.fromRGB(0, 0, 0)
		KeybindList.Position = UDim2.new(0, 10, 0.5, -123)
		KeybindList.BorderSizePixel = 2
		KeybindList.BackgroundColor3 = Color3.fromRGB(31, 31, 31)

		local Stroke = Instance.new("UIStroke")
		Stroke.Name = "Stroke"
		Stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		Stroke.LineJoinMode = Enum.LineJoinMode.Miter
		Stroke.Color = Color3.fromRGB(63, 63, 63)
		Stroke.Parent = KeybindList

		local Topbar = Instance.new("Frame")
		Topbar.Name = "Topbar"
		Topbar.AnchorPoint = Vector2.new(0.5, 0)
		Topbar.Size = UDim2.new(1, 0, 0, 18)
		Topbar.BorderColor3 = Color3.fromRGB(63, 63, 63)
		Topbar.Position = UDim2.new(0.5, 0, 0, 0)
		Topbar.BackgroundColor3 = Color3.fromRGB(31, 31, 31)
		Topbar.Parent = KeybindList

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.AnchorPoint = Vector2.new(0, 0.5)
		Title.Size = UDim2.new(1, -8, 1, 0)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0, 4, 0.5, 0)
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextTruncate = Enum.TextTruncate.SplitWord
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		-- Title.TextYAlignment = Enum.TextYAlignment.Top
		Title.Text = "Keybinds"
		Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSansSemibold)
		Title.TextXAlignment = Enum.TextXAlignment.Left
		Title.Parent = Topbar

		local Background = Instance.new("ImageLabel")
		Background.Name = "Background"
		Background.ZIndex = 2
		Background.AnchorPoint = Vector2.new(0.5, 0)
		Background.Size = UDim2.new(1, 0, 1, -19)
		Background.ClipsDescendants = true
		Background.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Background.BackgroundTransparency = 1
		Background.Position = UDim2.new(0.5, 0, 0, 19)
		Background.BorderSizePixel = 0
		Background.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Background.ScaleType = Enum.ScaleType.Tile
		Background.ImageColor3 = Color3.fromRGB(0, 0, 0)
		Background.TileSize = UDim2.new(0, 74, 0, 74)
		Background.Image = "rbxassetid://5553946656"
		Background.Parent = KeybindList

		local Resize = Instance.new("ImageButton")
		Resize.Name = "Resize"
		Resize.ZIndex = 4
		Resize.AnchorPoint = Vector2.new(1, 1)
		Resize.Size = UDim2.new(0, 10, 0, 10)
		Resize.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Resize.BackgroundTransparency = 1
		Resize.Position = UDim2.new(1, 0, 1, 0)
		Resize.BorderSizePixel = 0
		Resize.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Resize.ImageColor3 = Color3.fromRGB(63, 63, 63)
		Resize.ScaleType = Enum.ScaleType.Fit
		Resize.ResampleMode = Enum.ResamplerMode.Pixelated
		Resize.Image = "rbxassetid://7368471234"
		Resize.Parent = KeybindList

		local BindContainer = Instance.new("ScrollingFrame")
		BindContainer.Name = "BindContainer"
		BindContainer.ZIndex = 3
		BindContainer.AnchorPoint = Vector2.new(0.5, 0)
		BindContainer.Size = UDim2.new(1, 0, 1, -19)
		BindContainer.BorderColor3 = Color3.fromRGB(0, 0, 0)
		BindContainer.BackgroundTransparency = 1
		BindContainer.Position = UDim2.new(0.5, 0, 0, 19)
		BindContainer.Active = true
		BindContainer.BorderSizePixel = 0
		BindContainer.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		BindContainer.ScrollingDirection = Enum.ScrollingDirection.Y
		BindContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
		BindContainer.ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
		BindContainer.MidImage = "rbxassetid://6432766838"
		BindContainer.ScrollBarThickness = 0
		BindContainer.TopImage = "rbxassetid://6432766838"
		BindContainer.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
		BindContainer.BottomImage = "rbxassetid://6432766838"
		BindContainer.Parent = KeybindList

		local ListLayout = Instance.new("UIListLayout")
		ListLayout.Name = "ListLayout"
		ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
		ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		ListLayout.Padding = UDim.new(0, 4)
		ListLayout.Parent = BindContainer

		local Padding = Instance.new("UIPadding")
		Padding.Name = "Padding"
		Padding.PaddingTop = UDim.new(0, 4)
		Padding.PaddingLeft = UDim.new(0, 4)
		Padding.PaddingRight = UDim.new(0, 4)
		Padding.Parent = BindContainer

		return KeybindList
	end,
	KeybindMimic = function()
		local KeybindMimic = Instance.new("Frame")
		KeybindMimic.Name = "KeybindMimic"
		KeybindMimic.Size = UDim2.new(1, 0, 0, 14)
		KeybindMimic.BorderColor3 = Color3.fromRGB(0, 0, 0)
		KeybindMimic.BackgroundTransparency = 1
		KeybindMimic.BorderSizePixel = 0
		KeybindMimic.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.AnchorPoint = Vector2.new(0, 0.5)
		Title.Size = UDim2.new(1, -60, 1, 0)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0, 14, 0.5, 0)
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextTruncate = Enum.TextTruncate.SplitWord
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		Title.Text = "Keybind Mimic"
		Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Title.TextXAlignment = Enum.TextXAlignment.Left
		Title.Parent = KeybindMimic

		local Tick = Instance.new("Frame")
		Tick.Name = "Tick"
		Tick.Size = UDim2.new(0, 10, 0, 10)
		Tick.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Tick.Position = UDim2.new(0, 0, 0, 2)
		Tick.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
		Tick.Parent = KeybindMimic

		local Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = Tick

		local Layout = Instance.new("Frame")
		Layout.Name = "Layout"
		Layout.AnchorPoint = Vector2.new(1, 0)
		Layout.Size = UDim2.new(1, -14, 0, 14)
		Layout.ClipsDescendants = true
		Layout.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Layout.BackgroundTransparency = 1
		Layout.Position = UDim2.new(1, 0, 0, 0)
		Layout.BorderSizePixel = 0
		Layout.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Layout.Parent = KeybindMimic

		local ListLayout = Instance.new("UIListLayout")
		ListLayout.Name = "ListLayout"
		ListLayout.FillDirection = Enum.FillDirection.Horizontal
		ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
		ListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
		ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		ListLayout.Padding = UDim.new(0, 4)
		ListLayout.Parent = Layout

		local Keybind = Instance.new("TextLabel")
		Keybind.Name = "Keybind"
		Keybind.Size = UDim2.new(0, 42, 1, 0)
		Keybind.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Keybind.BackgroundTransparency = 1
		Keybind.BorderSizePixel = 0
		Keybind.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Keybind.FontSize = Enum.FontSize.Size14
		Keybind.TextStrokeTransparency = 0.75
		Keybind.TextSize = 14
		Keybind.RichText = true
		Keybind.TextColor3 = Color3.fromRGB(191, 191, 191)
		Keybind.Text = "[ NONE ]"
		Keybind.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Keybind.Parent = Layout

		return KeybindMimic
	end,
	Window = function()
		local Window = Instance.new("Frame")
		Window.Name = "Window"
		Window.ZIndex = 3
		Window.Size = UDim2.new(0, 496, 0, 496)
		Window.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Window.Position = UDim2.new(0.5, -248, 0.5, -248)
		Window.BorderSizePixel = 2
		Window.BackgroundColor3 = Color3.fromRGB(31, 31, 31)

		local Stroke = Instance.new("UIStroke")
		Stroke.Name = "Stroke"
		Stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		Stroke.LineJoinMode = Enum.LineJoinMode.Miter
		Stroke.Color = Color3.fromRGB(63, 63, 63)
		Stroke.Parent = Window

		local Topbar = Instance.new("Frame")
		Topbar.Name = "Topbar"
		Topbar.AnchorPoint = Vector2.new(0.5, 0)
		Topbar.Size = UDim2.new(1, 0, 0, 18)
		Topbar.BorderColor3 = Color3.fromRGB(63, 63, 63)
		Topbar.Position = UDim2.new(0.5, 0, 0, 0)
		Topbar.BackgroundColor3 = Color3.fromRGB(31, 31, 31)
		Topbar.Parent = Window

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.AnchorPoint = Vector2.new(0, 0.5)
		Title.Size = UDim2.new(1, -74, 1, 0)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0, 4, 0.5, 0)
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextTruncate = Enum.TextTruncate.SplitWord
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		-- Title.TextYAlignment = Enum.TextYAlignment.Top
		Title.Text = "Title"
		Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSansSemibold)
		Title.TextXAlignment = Enum.TextXAlignment.Left
		Title.Parent = Topbar

		local Label = Instance.new("TextLabel")
		Label.Name = "Label"
		Label.AnchorPoint = Vector2.new(1, 0.5)
		Label.Size = UDim2.new(0, 62, 1, 0)
		Label.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Label.BackgroundTransparency = 1
		Label.Position = UDim2.new(1, -4, 0.5, 0)
		Label.BorderSizePixel = 0
		Label.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Label.TextStrokeTransparency = 0.75
		Label.TextSize = 14
		Label.RichText = true
		Label.TextColor3 = Color3.fromRGB(191, 191, 191)
		-- Label.TextYAlignment = Enum.TextYAlignment.Top
		Label.Text = "Bracket V3.4"
		Label.FontFace = Font.fromEnum(Enum.Font.SourceSansSemibold)
		Label.TextXAlignment = Enum.TextXAlignment.Right
		Label.Parent = Topbar

		local Background = Instance.new("ImageLabel")
		Background.Name = "Background"
		Background.ZIndex = 2
		Background.AnchorPoint = Vector2.new(0.5, 0)
		Background.Size = UDim2.new(1, 0, 1, -19)
		Background.ClipsDescendants = true
		Background.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Background.BackgroundTransparency = 1
		Background.Position = UDim2.new(0.5, 0, 0, 19)
		Background.BorderSizePixel = 0
		Background.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Background.ScaleType = Enum.ScaleType.Tile
		Background.ImageColor3 = Color3.fromRGB(0, 0, 0)
		Background.TileSize = UDim2.new(0, 74, 0, 74)
		Background.Image = "rbxassetid://5553946656"
		Background.Parent = Window

		local Resize = Instance.new("ImageButton")
		Resize.Name = "Resize"
		Resize.ZIndex = 5
		Resize.AnchorPoint = Vector2.new(1, 1)
		Resize.Size = UDim2.new(0, 10, 0, 10)
		Resize.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Resize.BackgroundTransparency = 1
		Resize.Position = UDim2.new(1, 0, 1, 0)
		Resize.BorderSizePixel = 0
		Resize.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Resize.ImageColor3 = Color3.fromRGB(63, 63, 63)
		Resize.ScaleType = Enum.ScaleType.Fit
		Resize.ResampleMode = Enum.ResamplerMode.Pixelated
		Resize.Image = "rbxassetid://7368471234"
		Resize.Parent = Window

		local TabContainer = Instance.new("Frame")
		TabContainer.Name = "TabContainer"
		TabContainer.ZIndex = 4
		TabContainer.AnchorPoint = Vector2.new(0.5, 0)
		TabContainer.Size = UDim2.new(1, 0, 1, -49)
		TabContainer.BorderColor3 = Color3.fromRGB(0, 0, 0)
		TabContainer.BackgroundTransparency = 1
		TabContainer.Position = UDim2.new(0.5, 0, 0, 49)
		TabContainer.BorderSizePixel = 0
		TabContainer.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		TabContainer.Parent = Window

		local TabButtonContainer = Instance.new("ScrollingFrame")
		TabButtonContainer.Name = "TabButtonContainer"
		TabButtonContainer.ZIndex = 3
		TabButtonContainer.AnchorPoint = Vector2.new(0.5, 0)
		TabButtonContainer.Size = UDim2.new(1, -12, 0, 18)
		TabButtonContainer.BorderColor3 = Color3.fromRGB(0, 0, 0)
		TabButtonContainer.Position = UDim2.new(0.5, 0, 0, 25)
		TabButtonContainer.Active = true
		TabButtonContainer.BorderSizePixel = 2
		TabButtonContainer.BackgroundColor3 = Color3.fromRGB(31, 31, 31)
		TabButtonContainer.ScrollingDirection = Enum.ScrollingDirection.X
		TabButtonContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
		TabButtonContainer.ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
		TabButtonContainer.MidImage = "rbxassetid://6432766838"
		TabButtonContainer.ScrollBarThickness = 0
		TabButtonContainer.TopImage = "rbxassetid://6432766838"
		TabButtonContainer.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
		TabButtonContainer.BottomImage = "rbxassetid://6432766838"
		TabButtonContainer.Parent = Window

		local ListLayout = Instance.new("UIListLayout")
		ListLayout.Name = "ListLayout"
		ListLayout.FillDirection = Enum.FillDirection.Horizontal
		ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		ListLayout.Parent = TabButtonContainer

		Stroke = Instance.new("UIStroke")
		Stroke.Name = "Stroke"
		Stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		Stroke.LineJoinMode = Enum.LineJoinMode.Miter
		Stroke.Color = Color3.fromRGB(63, 63, 63)
		Stroke.Parent = TabButtonContainer

		return Window
	end,
	Tab = function()
		local Tab = Instance.new("ScrollingFrame")
		Tab.Name = "Tab"
		Tab.Visible = false
		Tab.AnchorPoint = Vector2.new(0.5, 0.5)
		Tab.Size = UDim2.new(1, 0, 1, 0)
		Tab.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Tab.BackgroundTransparency = 1
		Tab.Position = UDim2.new(0.5, 0, 0.5, 0)
		Tab.Active = true
		Tab.BorderSizePixel = 0
		Tab.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Tab.ScrollingDirection = Enum.ScrollingDirection.Y
		Tab.CanvasSize = UDim2.new(0, 0, 0, 0)
		Tab.ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
		Tab.MidImage = "rbxassetid://6432766838"
		Tab.ScrollBarThickness = 0
		Tab.TopImage = "rbxassetid://6432766838"
		Tab.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
		Tab.BottomImage = "rbxassetid://6432766838"

		local LeftSide = Instance.new("Frame")
		LeftSide.Name = "LeftSide"
		LeftSide.Size = UDim2.new(0.5, 0, 1, 0)
		LeftSide.BorderColor3 = Color3.fromRGB(0, 0, 0)
		LeftSide.BackgroundTransparency = 1
		LeftSide.BorderSizePixel = 0
		LeftSide.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		LeftSide.Parent = Tab

		local ListLayout = Instance.new("UIListLayout")
		ListLayout.Name = "ListLayout"
		ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
		ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		ListLayout.Padding = UDim.new(0, 14)
		ListLayout.Parent = LeftSide

		local Padding = Instance.new("UIPadding")
		Padding.Name = "Padding"
		Padding.PaddingTop = UDim.new(0, 8)
		Padding.PaddingLeft = UDim.new(0, 6)
		Padding.PaddingRight = UDim.new(0, 4)
		Padding.Parent = LeftSide

		local RightSide = Instance.new("Frame")
		RightSide.Name = "RightSide"
		RightSide.AnchorPoint = Vector2.new(1, 0)
		RightSide.Size = UDim2.new(0.5, 0, 1, 0)
		RightSide.BorderColor3 = Color3.fromRGB(0, 0, 0)
		RightSide.BackgroundTransparency = 1
		RightSide.Position = UDim2.new(1, 0, 0, 0)
		RightSide.BorderSizePixel = 0
		RightSide.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		RightSide.Parent = Tab

		ListLayout = Instance.new("UIListLayout")
		ListLayout.Name = "ListLayout"
		ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
		ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		ListLayout.Padding = UDim.new(0, 14)
		ListLayout.Parent = RightSide

		Padding = Instance.new("UIPadding")
		Padding.Name = "Padding"
		Padding.PaddingTop = UDim.new(0, 8)
		Padding.PaddingLeft = UDim.new(0, 4)
		Padding.PaddingRight = UDim.new(0, 6)
		Padding.Parent = RightSide

		return Tab
	end,
	TabButton = function()
		local TabButton = Instance.new("TextButton")
		TabButton.Name = "TabButton"
		TabButton.Size = UDim2.new(0, 67, 1, 0)
		TabButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
		TabButton.BackgroundTransparency = 1
		TabButton.BorderSizePixel = 0
		TabButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		TabButton.AutoButtonColor = false
		TabButton.TextStrokeTransparency = 0.75
		TabButton.TextSize = 14
		TabButton.RichText = true
		TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		-- TabButton.TextYAlignment = Enum.TextYAlignment.Top
		TabButton.Text = "TabButton"
		TabButton.FontFace = Font.fromEnum(Enum.Font.SourceSans)

		local Highlight = Instance.new("Frame")
		Highlight.Name = "Highlight"
		Highlight.Visible = false
		Highlight.AnchorPoint = Vector2.new(0.5, 1)
		Highlight.Size = UDim2.new(1, 0, 0, 1)
		Highlight.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Highlight.Position = UDim2.new(0.5, 0, 1, 0)
		Highlight.BorderSizePixel = 0
		Highlight.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Highlight.Parent = TabButton

		local Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Transparency = NumberSequence.new({
			NumberSequenceKeypoint.new(0, 1),
			NumberSequenceKeypoint.new(0.25, 0),
			NumberSequenceKeypoint.new(0.75, 0),
			NumberSequenceKeypoint.new(1, 1)
		})
		Gradient.Parent = Highlight

		return TabButton
	end,
	LegacyTabButton = function()
		local TabButton = Instance.new("TextButton")
		TabButton.Name = "TabButton"
		TabButton.Size = UDim2.new(0, 243, 1, 0)
		TabButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
		TabButton.BackgroundTransparency = 1
		TabButton.BorderSizePixel = 0
		TabButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		TabButton.AutoButtonColor = false
		TabButton.TextSize = 14
		TabButton.TextColor3 = Color3.fromRGB(0, 0, 0)
		TabButton.Text = ""
		TabButton.FontFace = Font.fromEnum(Enum.Font.SourceSans)

		local Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = TabButton

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.AnchorPoint = Vector2.new(0.5, 0.5)
		Title.Size = UDim2.new(1, 0, 1, 0)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0.5, 0, 0.5, 0)
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextTruncate = Enum.TextTruncate.SplitWord
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		-- Title.TextYAlignment = Enum.TextYAlignment.Top
		Title.Text = "TabButton"
		Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Title.Parent = TabButton

		return TabButton
	end,
	Section = function()
		local Section = Instance.new("Frame")
		Section.Name = "Section"
		Section.Size = UDim2.new(1, 0, 0, 434)
		Section.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Section.BorderSizePixel = 2
		Section.BackgroundColor3 = Color3.fromRGB(31, 31, 31)

		local Stroke = Instance.new("UIStroke")
		Stroke.Name = "Stroke"
		Stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		Stroke.LineJoinMode = Enum.LineJoinMode.Miter
		Stroke.Color = Color3.fromRGB(63, 63, 63)
		Stroke.Parent = Section

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.Size = UDim2.new(1, -12, 0, 14)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0, 6, 0, -9)
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(31, 31, 31)
		Title.TextStrokeTransparency = 0.75
		Title.TextTruncate = Enum.TextTruncate.SplitWord
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		Title.Text = "Section"
		Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Title.TextXAlignment = Enum.TextXAlignment.Left
		Title.Parent = Section

		local Container = Instance.new("Frame")
		Container.Name = "Container"
		Container.AnchorPoint = Vector2.new(0.5, 0)
		Container.Size = UDim2.new(1, 0, 1, -14)
		Container.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Container.BackgroundTransparency = 1
		Container.Position = UDim2.new(0.5, 0, 0, 10)
		Container.BorderSizePixel = 0
		Container.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Container.Parent = Section

		local ListLayout = Instance.new("UIListLayout")
		ListLayout.Name = "ListLayout"
		ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
		ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		ListLayout.Padding = UDim.new(0, 6)
		ListLayout.Parent = Container

		local Padding = Instance.new("UIPadding")
		Padding.Name = "Padding"
		Padding.PaddingLeft = UDim.new(0, 5)
		Padding.PaddingRight = UDim.new(0, 5)
		Padding.Parent = Container

		return Section
	end,
	Divider = function()
		local Divider = Instance.new("Frame")
		Divider.Name = "Divider"
		Divider.Size = UDim2.new(1, 0, 0, 14)
		Divider.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Divider.BackgroundTransparency = 1
		Divider.BorderSizePixel = 0
		Divider.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

		local Left = Instance.new("Frame")
		Left.Name = "Left"
		Left.AnchorPoint = Vector2.new(0, 0.5)
		Left.Size = UDim2.new(0.5, -24, 0, 2)
		Left.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Left.Position = UDim2.new(0, 0, 0.5, 0)
		Left.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
		Left.Parent = Divider

		local Right = Instance.new("Frame")
		Right.Name = "Right"
		Right.AnchorPoint = Vector2.new(1, 0.5)
		Right.Size = UDim2.new(0.5, -24, 0, 2)
		Right.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Right.Position = UDim2.new(1, 0, 0.5, 0)
		Right.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
		Right.Parent = Divider

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.AnchorPoint = Vector2.new(0.5, 0.5)
		Title.Size = UDim2.new(1, 0, 1, 0)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0.5, 0, 0.5, 0)
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		Title.Text = "Divider"
		Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Title.Parent = Divider

		return Divider
	end,
	Label = function()
		local Label = Instance.new("TextLabel")
		Label.Name = "Label"
		Label.Size = UDim2.new(1, 0, 0, 14)
		Label.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Label.BackgroundTransparency = 1
		Label.BorderSizePixel = 0
		Label.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Label.TextStrokeTransparency = 0.75
		Label.TextSize = 14
		Label.RichText = true
		Label.TextColor3 = Color3.fromRGB(255, 255, 255)
		Label.Text = "TextLabel"
		Label.TextWrapped = true
		Label.FontFace = Font.fromEnum(Enum.Font.SourceSans)

		return Label
	end,
	Button = function()
		local Button = Instance.new("TextButton")
		Button.Name = "Button"
		Button.Size = UDim2.new(1, 0, 0, 18)
		Button.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Button.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
		Button.AutoButtonColor = false
		Button.TextSize = 14
		Button.TextColor3 = Color3.fromRGB(0, 0, 0)
		Button.Text = ""
		Button.FontFace = Font.fromEnum(Enum.Font.SourceSans)

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.AnchorPoint = Vector2.new(0.5, 0.5)
		Title.Size = UDim2.new(1, -8, 1, 0)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0.5, 0, 0.5, 0)
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		Title.Text = "Button"
		Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Title.Parent = Button

		local Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = Button

		return Button
	end,
	Button2 = function()
		local Button = Instance.new("Frame")
		Button.Name = "Button"
		Button.Size = UDim2.new(1, 0, 0, 18)
		Button.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Button.BackgroundTransparency = 1
		Button.BorderSizePixel = 0
		Button.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.Size = UDim2.new(1, -48, 1, 0)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		Title.Text = "Button"
		Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Title.TextXAlignment = Enum.TextXAlignment.Left
		Title.Parent = Button

		local ActualButton = Instance.new("TextButton")
		ActualButton.Name = "Button"
		ActualButton.AnchorPoint = Vector2.new(1, 0)
		ActualButton.Size = UDim2.new(0, 44, 0, 18)
		ActualButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
		ActualButton.Position = UDim2.new(1, 0, 0, 0)
		ActualButton.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
		ActualButton.AutoButtonColor = false
		ActualButton.TextSize = 14
		ActualButton.TextColor3 = Color3.fromRGB(0, 0, 0)
		ActualButton.Text = ""
		ActualButton.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		ActualButton.Parent = Button

		Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.AnchorPoint = Vector2.new(0.5, 0.5)
		Title.Size = UDim2.new(1, -8, 1, 0)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0.5, 0, 0.5, 0)
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		Title.Text = "Button"
		-- Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Title.Parent = ActualButton

		local Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = ActualButton

		return Button
	end,
	Toggle = function()
		local Toggle = Instance.new("TextButton")
		Toggle.Name = "Toggle"
		Toggle.Size = UDim2.new(1, 0, 0, 14)
		Toggle.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Toggle.BackgroundTransparency = 1
		Toggle.BorderSizePixel = 0
		Toggle.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Toggle.AutoButtonColor = false
		Toggle.TextSize = 14
		Toggle.TextColor3 = Color3.fromRGB(0, 0, 0)
		Toggle.Text = ""
		Toggle.FontFace = Font.fromEnum(Enum.Font.SourceSans)

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.AnchorPoint = Vector2.new(0, 0.5)
		Title.Size = UDim2.new(1, -60, 1, 0)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0, 14, 0.5, 0)
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextTruncate = Enum.TextTruncate.SplitWord
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		Title.Text = "Toggle"
		Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Title.TextXAlignment = Enum.TextXAlignment.Left
		Title.Parent = Toggle

		local Tick = Instance.new("Frame")
		Tick.Name = "Tick"
		Tick.Size = UDim2.new(0, 10, 0, 10)
		Tick.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Tick.Position = UDim2.new(0, 0, 0, 2)
		Tick.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
		Tick.Parent = Toggle

		local Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = Tick

		local Layout = Instance.new("Frame")
		Layout.Name = "Layout"
		Layout.AnchorPoint = Vector2.new(1, 0)
		Layout.Size = UDim2.new(1, -14, 0, 14)
		Layout.ClipsDescendants = true
		Layout.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Layout.BackgroundTransparency = 1
		Layout.Position = UDim2.new(1, 0, 0, 0)
		Layout.BorderSizePixel = 0
		Layout.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Layout.Parent = Toggle

		local ListLayout = Instance.new("UIListLayout")
		ListLayout.Name = "ListLayout"
		ListLayout.FillDirection = Enum.FillDirection.Horizontal
		ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
		ListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
		ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		ListLayout.Padding = UDim.new(0, 4)
		ListLayout.Parent = Layout

		local Padding = Instance.new("UIPadding")
		Padding.Name = "Padding"
		Padding.PaddingRight = UDim.new(0, 1)
		Padding.Parent = Layout

		return Toggle
	end,
	Slider = function()
		local Slider = Instance.new("TextButton")
		Slider.Name = "Slider"
		Slider.Size = UDim2.new(1, 0, 0, 18)
		Slider.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Slider.BackgroundTransparency = 1
		Slider.BorderSizePixel = 0
		Slider.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Slider.AutoButtonColor = false
		Slider.TextSize = 14
		Slider.TextColor3 = Color3.fromRGB(0, 0, 0)
		Slider.Text = ""
		Slider.FontFace = Font.fromEnum(Enum.Font.SourceSans)

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.ZIndex = 2
		Title.Size = UDim2.new(1, -24, 1, 0)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0, 4, 0, 0)
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		Title.Text = "Slider"
		Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Title.TextXAlignment = Enum.TextXAlignment.Left
		Title.Parent = Slider

		local Value = Instance.new("TextBox")
		Value.Name = "Value"
		Value.ZIndex = 2
		Value.AnchorPoint = Vector2.new(1, 0)
		Value.Size = UDim2.new(0, 12, 1, 0)
		Value.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Value.BackgroundTransparency = 1
		Value.Position = UDim2.new(1, -4, 0, 0)
		Value.BorderSizePixel = 0
		Value.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Value.TextStrokeTransparency = 0.75
		Value.PlaceholderColor3 = Color3.fromRGB(191, 191, 191)
		Value.TextSize = 14
		Value.TextColor3 = Color3.fromRGB(255, 255, 255)
		Value.PlaceholderText = "50"
		Value.Text = ""
		Value.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Value.TextXAlignment = Enum.TextXAlignment.Right
		Value.Parent = Slider

		local Background = Instance.new("Frame")
		Background.Name = "Background"
		Background.AnchorPoint = Vector2.new(0.5, 0.5)
		Background.Size = UDim2.new(1, 0, 1, 0)
		Background.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Background.Position = UDim2.new(0.5, 0, 0.5, 0)
		Background.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
		Background.Parent = Slider

		local Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = Background

		local Bar = Instance.new("Frame")
		Bar.Name = "Bar"
		Bar.ZIndex = 2
		Bar.AnchorPoint = Vector2.new(0, 0.5)
		Bar.Size = UDim2.new(0.5, 0, 1, 0)
		Bar.BorderColor3 = Color3.fromRGB(30, 30, 30)
		Bar.Position = UDim2.new(0, 0, 0.5, 0)
		Bar.BorderSizePixel = 0
		Bar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Bar.Parent = Background

		Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = Bar

		return Slider
	end,
	SlimSlider = function()
		local SlimSlider = Instance.new("TextButton")
		SlimSlider.Name = "SlimSlider"
		SlimSlider.Size = UDim2.new(1, 0, 0, 28)
		SlimSlider.BorderColor3 = Color3.fromRGB(0, 0, 0)
		SlimSlider.BackgroundTransparency = 1
		SlimSlider.BorderSizePixel = 0
		SlimSlider.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		SlimSlider.AutoButtonColor = false
		SlimSlider.TextSize = 14
		SlimSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
		SlimSlider.Text = ""
		SlimSlider.FontFace = Font.fromEnum(Enum.Font.SourceSans)

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.Size = UDim2.new(1, -16, 0, 14)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		Title.Text = "Slider"
		Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Title.TextXAlignment = Enum.TextXAlignment.Left
		Title.Parent = SlimSlider

		local Value = Instance.new("TextBox")
		Value.Name = "Value"
		Value.AnchorPoint = Vector2.new(1, 0)
		Value.Size = UDim2.new(0, 12, 0, 14)
		Value.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Value.BackgroundTransparency = 1
		Value.Position = UDim2.new(1, 0, 0, 0)
		Value.BorderSizePixel = 0
		Value.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Value.TextStrokeTransparency = 0.75
		Value.PlaceholderColor3 = Color3.fromRGB(191, 191, 191)
		Value.TextSize = 14
		Value.TextColor3 = Color3.fromRGB(255, 255, 255)
		Value.PlaceholderText = "50"
		Value.Text = ""
		Value.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Value.TextXAlignment = Enum.TextXAlignment.Right
		Value.Parent = SlimSlider

		local Background = Instance.new("Frame")
		Background.Name = "Background"
		Background.AnchorPoint = Vector2.new(0.5, 0)
		Background.Size = UDim2.new(1, 0, 0, 10)
		Background.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Background.Position = UDim2.new(0.5, 0, 0, 18)
		Background.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
		Background.Parent = SlimSlider

		local Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = Background

		local Bar = Instance.new("Frame")
		Bar.Name = "Bar"
		Bar.AnchorPoint = Vector2.new(0, 0.5)
		Bar.Size = UDim2.new(0.5, 0, 1, 0)
		Bar.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Bar.Position = UDim2.new(0, 0, 0.5, 0)
		Bar.BorderSizePixel = 0
		Bar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Bar.Parent = Background

		Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = Bar

		return SlimSlider
	end,
	Textbox = function()
		local Textbox = Instance.new("TextButton")
		Textbox.Name = "Textbox"
		Textbox.Size = UDim2.new(1, 0, 0, 36)
		Textbox.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Textbox.BackgroundTransparency = 1
		Textbox.BorderSizePixel = 0
		Textbox.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Textbox.AutoButtonColor = false
		Textbox.TextSize = 14
		Textbox.TextColor3 = Color3.fromRGB(0, 0, 0)
		Textbox.Text = ""
		Textbox.FontFace = Font.fromEnum(Enum.Font.SourceSans)

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.AnchorPoint = Vector2.new(0.5, 0)
		Title.Size = UDim2.new(1, 0, 0, 14)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0.5, 0, 0, 0)
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		Title.Text = "Textbox"
		Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Title.TextXAlignment = Enum.TextXAlignment.Left
		Title.Parent = Textbox

		local Background = Instance.new("Frame")
		Background.Name = "Background"
		Background.AnchorPoint = Vector2.new(0.5, 0)
		Background.Size = UDim2.new(1, 0, 0, 18)
		Background.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Background.Position = UDim2.new(0.5, 0, 0, 18)
		Background.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
		Background.Parent = Textbox

		local Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = Background

		local Input = Instance.new("TextBox")
		Input.Name = "Input"
		Input.AnchorPoint = Vector2.new(0.5, 0.5)
		Input.Size = UDim2.new(1, -10, 1, 0)
		Input.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Input.BackgroundTransparency = 1
		Input.Position = UDim2.new(0.5, 0, 0.5, 0)
		Input.BorderSizePixel = 0
		Input.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Input.TextStrokeTransparency = 0.75
		Input.TextWrapped = true
		Input.PlaceholderColor3 = Color3.fromRGB(191, 191, 191)
		Input.TextSize = 14
		Input.TextColor3 = Color3.fromRGB(255, 255, 255)
		Input.PlaceholderText = "Input here"
		Input.Text = ""
		Input.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Input.ClearTextOnFocus = false
		Input.Parent = Background

		return Textbox
	end,
	Keybind = function()
		local Keybind = Instance.new("TextButton")
		Keybind.Name = "Keybind"
		Keybind.Size = UDim2.new(1, 0, 0, 14)
		Keybind.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Keybind.BackgroundTransparency = 1
		Keybind.BorderSizePixel = 0
		Keybind.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Keybind.AutoButtonColor = false
		Keybind.TextSize = 14
		Keybind.TextColor3 = Color3.fromRGB(0, 0, 0)
		Keybind.Text = ""
		Keybind.FontFace = Font.fromEnum(Enum.Font.SourceSans)

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.AnchorPoint = Vector2.new(0, 0.5)
		Title.Size = UDim2.new(1, -46, 1, 0)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0, 0, 0.5, 0)
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		Title.Text = "Keybind"
		Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Title.TextXAlignment = Enum.TextXAlignment.Left
		Title.Parent = Keybind

		local Value = Instance.new("TextLabel")
		Value.Name = "Value"
		Value.AnchorPoint = Vector2.new(1, 0)
		Value.Size = UDim2.new(0, 42, 0, 14)
		Value.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Value.BackgroundTransparency = 1
		Value.Position = UDim2.new(1, 0, 0, 0)
		Value.BorderSizePixel = 0
		Value.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Value.TextStrokeTransparency = 0.75
		Value.TextSize = 14
		Value.RichText = true
		Value.TextColor3 = Color3.fromRGB(191, 191, 191)
		Value.Text = "[ NONE ]"
		Value.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Value.TextXAlignment = Enum.TextXAlignment.Right
		Value.Parent = Keybind

		return Keybind
	end,
	ToggleKeybind = function()
		local TKeybind = Instance.new("TextButton")
		TKeybind.Name = "TKeybind"
		TKeybind.Size = UDim2.new(0, 42, 1, 0)
		TKeybind.BorderColor3 = Color3.fromRGB(0, 0, 0)
		TKeybind.BackgroundTransparency = 1
		TKeybind.BorderSizePixel = 0
		TKeybind.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		TKeybind.AutoButtonColor = false
		TKeybind.TextStrokeTransparency = 0.75
		TKeybind.TextSize = 14
		TKeybind.RichText = true
		TKeybind.TextColor3 = Color3.fromRGB(191, 191, 191)
		TKeybind.Text = "[ NONE ]"
		TKeybind.FontFace = Font.fromEnum(Enum.Font.SourceSans)

		return TKeybind
	end,
	Dropdown = function()
		local Dropdown = Instance.new("TextButton")
		Dropdown.Name = "Dropdown"
		Dropdown.Size = UDim2.new(1, 0, 0, 37)
		Dropdown.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Dropdown.BackgroundTransparency = 1
		Dropdown.BorderSizePixel = 0
		Dropdown.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Dropdown.AutoButtonColor = false
		Dropdown.TextSize = 14
		Dropdown.TextColor3 = Color3.fromRGB(0, 0, 0)
		Dropdown.Text = ""
		Dropdown.FontFace = Font.fromEnum(Enum.Font.SourceSans)

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.AnchorPoint = Vector2.new(0.5, 0)
		Title.Size = UDim2.new(1, 0, 0, 14)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0.5, 0, 0, 0)
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		Title.Text = "Dropdown"
		Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Title.TextXAlignment = Enum.TextXAlignment.Left
		Title.Parent = Dropdown

		local Background = Instance.new("Frame")
		Background.Name = "Background"
		Background.AnchorPoint = Vector2.new(0.5, 0)
		Background.Size = UDim2.new(1, 0, 0, 18)
		Background.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Background.Position = UDim2.new(0.5, 0, 0, 18)
		Background.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
		Background.Parent = Dropdown

		local Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = Background

		local Value = Instance.new("TextLabel")
		Value.Name = "Value"
		Value.AnchorPoint = Vector2.new(0.5, 0.5)
		Value.Size = UDim2.new(1, -10, 1, 0)
		Value.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Value.BackgroundTransparency = 1
		Value.Position = UDim2.new(0.5, 0, 0.5, 0)
		Value.BorderSizePixel = 0
		Value.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Value.TextStrokeTransparency = 0.75
		Value.TextTruncate = Enum.TextTruncate.SplitWord
		Value.TextSize = 14
		Value.TextColor3 = Color3.fromRGB(255, 255, 255)
		Value.Text = "..."
		Value.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Value.TextXAlignment = Enum.TextXAlignment.Left
		Value.Parent = Background

		return Dropdown
	end,
	OptionContainer = function()
		local OptionContainer = Instance.new("ScrollingFrame")
		OptionContainer.Name = "OptionContainer"
		OptionContainer.ZIndex = 4
		OptionContainer.Visible = false
		OptionContainer.Size = UDim2.new(0, 100, 0, 100)
		OptionContainer.BorderColor3 = Color3.fromRGB(0, 0, 0)
		OptionContainer.Position = UDim2.new(0, 100, 0, 100)
		OptionContainer.Active = true
		OptionContainer.BackgroundColor3 = Color3.fromRGB(31, 31, 31)
		OptionContainer.ScrollingDirection = Enum.ScrollingDirection.Y
		OptionContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
		OptionContainer.ScrollBarImageColor3 = Color3.fromRGB(63, 63, 63)
		OptionContainer.MidImage = "rbxassetid://6432766838"
		OptionContainer.ScrollBarThickness = 6
		OptionContainer.TopImage = "rbxassetid://6432766838"
		OptionContainer.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
		OptionContainer.BottomImage = "rbxassetid://6432766838"

		local ListLayout = Instance.new("UIListLayout")
		ListLayout.Name = "ListLayout"
		ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
		ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		ListLayout.Padding = UDim.new(0, 2)
		ListLayout.Parent = OptionContainer

		local Padding = Instance.new("UIPadding")
		Padding.Name = "Padding"
		Padding.PaddingTop = UDim.new(0, 3)
		Padding.PaddingBottom = UDim.new(0, 3)
		Padding.PaddingLeft = UDim.new(0, 5)
		Padding.PaddingRight = UDim.new(0, 5)
		Padding.Parent = OptionContainer

		return OptionContainer
	end,
	DropdownOption = function()
		local Option = Instance.new("TextButton")
		Option.Name = "Option"
		Option.Size = UDim2.new(1, 0, 0, 14)
		Option.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Option.BackgroundTransparency = 1
		Option.BorderSizePixel = 0
		Option.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Option.AutoButtonColor = false
		Option.TextSize = 14
		Option.TextColor3 = Color3.fromRGB(0, 0, 0)
		Option.Text = ""
		Option.FontFace = Font.fromEnum(Enum.Font.SourceSans)

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.AnchorPoint = Vector2.new(0, 0.5)
		Title.Size = UDim2.new(1, -38, 1, 0)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0, 14, 0.5, 0)
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextTruncate = Enum.TextTruncate.SplitWord
		Title.TextSize = 14
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		Title.Text = "Option"
		Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Title.TextXAlignment = Enum.TextXAlignment.Left
		Title.Parent = Option

		local Tick = Instance.new("Frame")
		Tick.Name = "Tick"
		Tick.Size = UDim2.new(0, 10, 0, 10)
		Tick.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Tick.Position = UDim2.new(0, 0, 0, 2)
		Tick.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
		Tick.Parent = Option

		local Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = Tick

		local Layout = Instance.new("Frame")
		Layout.Name = "Layout"
		Layout.AnchorPoint = Vector2.new(1, 0)
		Layout.Size = UDim2.new(1, -14, 0, 14)
		Layout.ClipsDescendants = true
		Layout.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Layout.BackgroundTransparency = 1
		Layout.Position = UDim2.new(1, 0, 0, 0)
		Layout.BorderSizePixel = 0
		Layout.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Layout.Parent = Option

		local ListLayout = Instance.new("UIListLayout")
		ListLayout.Name = "ListLayout"
		ListLayout.FillDirection = Enum.FillDirection.Horizontal
		ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
		ListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
		ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		ListLayout.Padding = UDim.new(0, 4)
		ListLayout.Parent = Layout

		local Padding = Instance.new("UIPadding")
		Padding.Name = "Padding"
		Padding.PaddingRight = UDim.new(0, 1)
		Padding.Parent = Layout

		return Option
	end,
	Colorpicker = function()
		local Colorpicker = Instance.new("TextButton")
		Colorpicker.Name = "Colorpicker"
		Colorpicker.Size = UDim2.new(1, 0, 0, 14)
		Colorpicker.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Colorpicker.BackgroundTransparency = 1
		Colorpicker.BorderSizePixel = 0
		Colorpicker.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Colorpicker.AutoButtonColor = false
		Colorpicker.TextSize = 14
		Colorpicker.TextColor3 = Color3.fromRGB(0, 0, 0)
		Colorpicker.Text = ""
		Colorpicker.FontFace = Font.fromEnum(Enum.Font.SourceSans)

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.Size = UDim2.new(1, -24, 1, 0)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		Title.Text = "Colorpicker"
		Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Title.TextXAlignment = Enum.TextXAlignment.Left
		Title.Parent = Colorpicker

		local Color = Instance.new("Frame")
		Color.Name = "Color"
		Color.AnchorPoint = Vector2.new(1, 0)
		Color.Size = UDim2.new(0, 20, 0, 10)
		Color.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Color.Position = UDim2.new(1, 0, 0, 2)
		Color.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Color.Parent = Colorpicker

		local Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = Color

		return Colorpicker
	end,
	ToggleColorpicker = function()
		local TColorpicker = Instance.new("TextButton")
		TColorpicker.Name = "TColorpicker"
		TColorpicker.AnchorPoint = Vector2.new(1, 0.5)
		TColorpicker.Size = UDim2.new(0, 20, 0, 10)
		TColorpicker.BorderColor3 = Color3.fromRGB(0, 0, 0)
		TColorpicker.Position = UDim2.new(1, 0, 0.5, 0)
		TColorpicker.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		TColorpicker.AutoButtonColor = false
		TColorpicker.TextSize = 14
		TColorpicker.TextColor3 = Color3.fromRGB(0, 0, 0)
		TColorpicker.Text = ""
		TColorpicker.FontFace = Font.fromEnum(Enum.Font.SourceSans)

		local Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = TColorpicker

		return TColorpicker
	end,
	ColorpickerPalette = function()
		local Palette = Instance.new("Frame")
		Palette.Name = "Palette"
		Palette.ZIndex = 4
		Palette.Visible = false
		Palette.Size = UDim2.new(0, 150, 0, 290)
		Palette.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Palette.Position = UDim2.new(0, 100, 0, 100)
		Palette.BackgroundColor3 = Color3.fromRGB(60, 60, 60)

		local Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = Palette

		local ListLayout = Instance.new("UIListLayout")
		ListLayout.Name = "ListLayout"
		ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
		ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		ListLayout.Padding = UDim.new(0, 6)
		ListLayout.Parent = Palette

		local Padding = Instance.new("UIPadding")
		Padding.Name = "Padding"
		Padding.PaddingTop = UDim.new(0, 5)
		Padding.PaddingBottom = UDim.new(0, 5)
		Padding.PaddingLeft = UDim.new(0, 5)
		Padding.PaddingRight = UDim.new(0, 5)
		Padding.Parent = Palette

		local SVPicker = Instance.new("TextButton")
		SVPicker.Name = "SVPicker"
		SVPicker.AnchorPoint = Vector2.new(0.5, 0)
		SVPicker.Size = UDim2.new(1, 0, 0, 180)
		SVPicker.BorderColor3 = Color3.fromRGB(0, 0, 0)
		SVPicker.Position = UDim2.new(0.5, 0, 0, 0)
		SVPicker.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
		SVPicker.AutoButtonColor = false
		SVPicker.TextSize = 14
		SVPicker.TextColor3 = Color3.fromRGB(0, 0, 0)
		SVPicker.Text = ""
		SVPicker.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		SVPicker.Parent = Palette

		local Brightness = Instance.new("Frame")
		Brightness.Name = "Brightness"
		Brightness.AnchorPoint = Vector2.new(0.5, 0.5)
		Brightness.Size = UDim2.new(1, 0, 1, 0)
		Brightness.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Brightness.Position = UDim2.new(0.5, 0, 0.5, 0)
		Brightness.BorderSizePixel = 0
		Brightness.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Brightness.Parent = SVPicker

		Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Transparency = NumberSequence.new(0, 1)
		Gradient.Parent = Brightness

		local Saturation = Instance.new("Frame")
		Saturation.Name = "Saturation"
		Saturation.ZIndex = 2
		Saturation.AnchorPoint = Vector2.new(0.5, 0.5)
		Saturation.Size = UDim2.new(1, 0, 1, 0)
		Saturation.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Saturation.Position = UDim2.new(0.5, 0, 0.5, 0)
		Saturation.BorderSizePixel = 0
		Saturation.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
		Saturation.Parent = SVPicker

		Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Transparency = NumberSequence.new(1, 0)
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(0, 0, 0))
		Gradient.Parent = Saturation

		local Pin = Instance.new("Frame")
		Pin.Name = "Pin"
		Pin.ZIndex = 3
		Pin.AnchorPoint = Vector2.new(0.5, 0.5)
		Pin.Size = UDim2.new(0, 3, 0, 3)
		Pin.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Pin.Rotation = 45
		Pin.BackgroundTransparency = 1
		Pin.Position = UDim2.new(0.5, 0, 0.5, 0)
		Pin.BorderSizePixel = 0
		Pin.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Pin.Parent = SVPicker

		local Stroke = Instance.new("UIStroke")
		Stroke.Name = "Stroke"
		Stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		Stroke.LineJoinMode = Enum.LineJoinMode.Miter
		Stroke.Thickness = 1.5
		Stroke.Parent = Pin

		local Hue = Instance.new("TextButton")
		Hue.Name = "Hue"
		Hue.LayoutOrder = 1
		Hue.AnchorPoint = Vector2.new(0.5, 0)
		Hue.Size = UDim2.new(1, 0, 0, 10)
		Hue.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Hue.Position = UDim2.new(0.5, 0, 0, 151)
		Hue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Hue.AutoButtonColor = false
		Hue.TextSize = 14
		Hue.TextColor3 = Color3.fromRGB(0, 0, 0)
		Hue.Text = ""
		Hue.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Hue.Parent = Palette

		Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.1666667, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(0.3333333, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.6666667, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.8333333, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))})
		Gradient.Parent = Hue

		Pin = Instance.new("Frame")
		Pin.Name = "Pin"
		Pin.ZIndex = 3
		Pin.AnchorPoint = Vector2.new(0.5, 0.5)
		Pin.Size = UDim2.new(0, 1, 1, 0)
		Pin.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Pin.Position = UDim2.new(0, 0, 0.5, 0)
		Pin.BackgroundColor3 = Color3.fromRGB(252, 252, 252)
		Pin.Parent = Hue

		local Alpha = Instance.new("TextButton")
		Alpha.Name = "Alpha"
		Alpha.LayoutOrder = 2
		Alpha.AnchorPoint = Vector2.new(0.5, 0)
		Alpha.Size = UDim2.new(1, 0, 0, 10)
		Alpha.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Alpha.Position = UDim2.new(0.5, 0, 0, 207)
		Alpha.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
		Alpha.AutoButtonColor = false
		Alpha.TextSize = 14
		Alpha.TextColor3 = Color3.fromRGB(0, 0, 0)
		Alpha.Text = ""
		Alpha.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Alpha.Parent = Palette

		Stroke = Instance.new("UIStroke")
		Stroke.Name = "Stroke"
		Stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		Stroke.LineJoinMode = Enum.LineJoinMode.Miter
		Stroke.Parent = Alpha

		Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Transparency = NumberSequence.new(0, 1)
		Gradient.Parent = Alpha

		Pin = Instance.new("Frame")
		Pin.Name = "Pin"
		Pin.AnchorPoint = Vector2.new(0.5, 0.5)
		Pin.Size = UDim2.new(0, 1, 1, 0)
		Pin.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Pin.Position = UDim2.new(0, 0, 0.5, 0)
		Pin.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Pin.Parent = Alpha

		local Value = Instance.new("TextLabel")
		Value.Name = "Value"
		Value.AnchorPoint = Vector2.new(0.5, 0.5)
		Value.Size = UDim2.new(1, -8, 1, 0)
		Value.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Value.BackgroundTransparency = 1
		Value.Position = UDim2.new(0.5, 0, 0.5, 0)
		Value.BorderSizePixel = 0
		Value.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Value.TextStrokeTransparency = 0.75
		Value.TextSize = 12
		Value.TextColor3 = Color3.fromRGB(255, 255, 255)
		Value.TextYAlignment = Enum.TextYAlignment.Bottom
		Value.Text = "1"
		Value.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Value.TextXAlignment = Enum.TextXAlignment.Right
		Value.Parent = Alpha

		local RGB = Instance.new("Frame")
		RGB.Name = "RGB"
		RGB.LayoutOrder = 3
		RGB.AnchorPoint = Vector2.new(0.5, 0)
		RGB.Size = UDim2.new(1, 0, 0, 18)
		RGB.BorderColor3 = Color3.fromRGB(0, 0, 0)
		RGB.Position = UDim2.new(0.5, 0, 0, 223)
		RGB.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
		RGB.Parent = Palette

		local RGBBox = Instance.new("TextBox")
		RGBBox.Name = "RGBBox"
		RGBBox.ZIndex = 3
		RGBBox.AnchorPoint = Vector2.new(0, 0.5)
		RGBBox.Size = UDim2.new(1, -30, 1, 0)
		RGBBox.BorderColor3 = Color3.fromRGB(0, 0, 0)
		RGBBox.BackgroundTransparency = 1
		RGBBox.Position = UDim2.new(0, 30, 0.5, 0)
		RGBBox.BorderSizePixel = 0
		RGBBox.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		RGBBox.TextStrokeTransparency = 0.75
		RGBBox.PlaceholderColor3 = Color3.fromRGB(191, 191, 191)
		RGBBox.TextSize = 14
		RGBBox.TextColor3 = Color3.fromRGB(255, 255, 255)
		RGBBox.PlaceholderText = "255, 0, 0"
		RGBBox.Text = ""
		RGBBox.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		RGBBox.TextXAlignment = Enum.TextXAlignment.Left
		RGBBox.Parent = RGB

		Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = RGB

		local RGBText = Instance.new("TextLabel")
		RGBText.Name = "RGBText"
		RGBText.ZIndex = 3
		RGBText.AnchorPoint = Vector2.new(0, 0.5)
		RGBText.Size = UDim2.new(0, 26, 1, 0)
		RGBText.BorderColor3 = Color3.fromRGB(0, 0, 0)
		RGBText.BackgroundTransparency = 1
		RGBText.Position = UDim2.new(0, 4, 0.5, 0)
		RGBText.BorderSizePixel = 0
		RGBText.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		RGBText.TextStrokeTransparency = 0.75
		RGBText.TextSize = 14
		RGBText.TextColor3 = Color3.fromRGB(255, 255, 255)
		RGBText.Text = "RGB: "
		RGBText.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		RGBText.TextXAlignment = Enum.TextXAlignment.Left
		RGBText.Parent = RGB

		local HEX = Instance.new("Frame")
		HEX.Name = "HEX"
		HEX.LayoutOrder = 4
		HEX.AnchorPoint = Vector2.new(0.5, 0)
		HEX.Size = UDim2.new(1, 0, 0, 18)
		HEX.BorderColor3 = Color3.fromRGB(0, 0, 0)
		HEX.Position = UDim2.new(0.5, 0, 0, 249)
		HEX.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
		HEX.Parent = Palette

		local HEXBox = Instance.new("TextBox")
		HEXBox.Name = "HEXBox"
		HEXBox.AnchorPoint = Vector2.new(0, 0.5)
		HEXBox.Size = UDim2.new(1, -35, 1, 0)
		HEXBox.BorderColor3 = Color3.fromRGB(0, 0, 0)
		HEXBox.BackgroundTransparency = 1
		HEXBox.Position = UDim2.new(0, 35, 0.5, 0)
		HEXBox.BorderSizePixel = 0
		HEXBox.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		HEXBox.TextStrokeTransparency = 0.75
		HEXBox.PlaceholderColor3 = Color3.fromRGB(191, 191, 191)
		HEXBox.TextSize = 14
		HEXBox.TextColor3 = Color3.fromRGB(255, 255, 255)
		HEXBox.PlaceholderText = "FF0000"
		HEXBox.Text = ""
		HEXBox.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		HEXBox.TextXAlignment = Enum.TextXAlignment.Left
		HEXBox.Parent = HEX

		local HEXText = Instance.new("TextLabel")
		HEXText.Name = "HEXText"
		HEXText.AnchorPoint = Vector2.new(0, 0.5)
		HEXText.Size = UDim2.new(0, 31, 1, 0)
		HEXText.BorderColor3 = Color3.fromRGB(0, 0, 0)
		HEXText.BackgroundTransparency = 1
		HEXText.Position = UDim2.new(0, 4, 0.5, 0)
		HEXText.BorderSizePixel = 0
		HEXText.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		HEXText.FontSize = Enum.FontSize.Size14
		HEXText.TextStrokeTransparency = 0.75
		HEXText.TextSize = 14
		HEXText.TextColor3 = Color3.fromRGB(255, 255, 255)
		HEXText.Text = "HEX: #"
		HEXText.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		HEXText.TextXAlignment = Enum.TextXAlignment.Left
		HEXText.Parent = HEX

		Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = HEX

		local Rainbow = Instance.new("TextButton")
		Rainbow.Name = "Rainbow"
		Rainbow.LayoutOrder = 5
		Rainbow.AnchorPoint = Vector2.new(0.5, 0)
		Rainbow.Size = UDim2.new(1, 0, 0, 14)
		Rainbow.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Rainbow.BackgroundTransparency = 1
		Rainbow.Position = UDim2.new(0.5, 0, 0, 270)
		Rainbow.BorderSizePixel = 0
		Rainbow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Rainbow.AutoButtonColor = false
		Rainbow.TextSize = 14
		Rainbow.TextColor3 = Color3.fromRGB(0, 0, 0)
		Rainbow.Text = ""
		Rainbow.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Rainbow.Parent = Palette

		local Tick = Instance.new("Frame")
		Tick.Name = "Tick"
		Tick.Size = UDim2.new(0, 10, 0, 10)
		Tick.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Tick.Position = UDim2.new(0, 0, 0, 2)
		Tick.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
		Tick.Parent = Rainbow

		Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Rotation = 90
		Gradient.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(191, 191, 191))
		Gradient.Parent = Tick

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.Size = UDim2.new(1, -14, 1, 0)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0, 14, 0, 0)
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextSize = 14
		Title.TextColor3 = Color3.fromRGB(252, 252, 252)
		Title.Text = "Rainbow"
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Title.TextXAlignment = Enum.TextXAlignment.Left
		Title.Parent = Rainbow

		return Palette
	end,
	PushNotification = function()
		local Push = Instance.new("Frame")
		Push.Name = "Push"
		Push.Size = UDim2.new(0, 200, 0, 48)
		Push.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Push.BorderSizePixel = 2
		Push.BackgroundColor3 = Color3.fromRGB(31, 31, 31)

		local Stroke = Instance.new("UIStroke")
		Stroke.Name = "Stroke"
		Stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		Stroke.LineJoinMode = Enum.LineJoinMode.Miter
		Stroke.Color = Color3.fromRGB(60, 60, 60)
		Stroke.Parent = Push

		local ListLayout = Instance.new("UIListLayout")
		ListLayout.Name = "ListLayout"
		ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
		ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		ListLayout.Padding = UDim.new(0, 5)
		ListLayout.Parent = Push

		local Padding = Instance.new("UIPadding")
		Padding.Name = "Padding"
		Padding.PaddingTop = UDim.new(0, 4)
		Padding.PaddingBottom = UDim.new(0, 4)
		Padding.PaddingLeft = UDim.new(0, 4)
		Padding.PaddingRight = UDim.new(0, 4)
		Padding.Parent = Push

		local TitleHolder = Instance.new("Frame")
		TitleHolder.Name = "TitleHolder"
		TitleHolder.Size = UDim2.new(1, 0, 0, 14)
		TitleHolder.BorderColor3 = Color3.fromRGB(0, 0, 0)
		TitleHolder.BackgroundTransparency = 1
		TitleHolder.BorderSizePixel = 0
		TitleHolder.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		TitleHolder.Parent = Push

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.Size = UDim2.new(1, -14, 1, 0)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextTruncate = Enum.TextTruncate.SplitWord
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(252, 252, 252)
		-- Title.TextYAlignment = Enum.TextYAlignment.Top
		Title.Text = "Title"
		Title.TextWrapped = true
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSansSemibold)
		Title.TextXAlignment = Enum.TextXAlignment.Left
		Title.Parent = TitleHolder

		local Close = Instance.new("TextButton")
		Close.Name = "Close"
		Close.AnchorPoint = Vector2.new(1, 0)
		Close.Size = UDim2.new(0, 14, 0, 14)
		Close.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Close.BackgroundTransparency = 1
		Close.Position = UDim2.new(1, 0, 0, 0)
		Close.BorderSizePixel = 0
		Close.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Close.AutoButtonColor = false
		Close.TextStrokeTransparency = 0.75
		Close.TextSize = 14
		Close.TextColor3 = Color3.fromRGB(255, 255, 255)
		Close.Text = "X"
		Close.FontFace = Font.fromEnum(Enum.Font.Nunito)
		Close.Parent = TitleHolder

		local Divider = Instance.new("Frame")
		Divider.Name = "Divider"
		Divider.LayoutOrder = 1
		Divider.Size = UDim2.new(1, -2, 0, 2)
		Divider.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Divider.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
		Divider.Parent = Push

		local Description = Instance.new("TextLabel")
		Description.Name = "Description"
		Description.LayoutOrder = 2
		Description.Size = UDim2.new(1, 0, 0, 14)
		Description.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Description.BackgroundTransparency = 1
		Description.BorderSizePixel = 0
		Description.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Description.TextStrokeTransparency = 0.75
		Description.TextSize = 14
		Description.RichText = true
		Description.TextColor3 = Color3.fromRGB(255, 255, 255)
		-- Description.TextYAlignment = Enum.TextYAlignment.Top
		Description.Text = "Description"
		Description.TextWrapped = true
		Description.TextWrap = true
		Description.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Description.TextXAlignment = Enum.TextXAlignment.Left
		Description.Parent = Push

		return Push
	end,
	ToastNotification = function()
		local Toast = Instance.new("Frame")
		Toast.Name = "Toast"
		Toast.Size = UDim2.new(0, 259, 0, 24)
		Toast.ClipsDescendants = true
		Toast.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Toast.BackgroundTransparency = 1
		Toast.BorderSizePixel = 0
		Toast.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

		local Main = Instance.new("Frame")
		Main.Name = "Main"
		Main.AnchorPoint = Vector2.new(0, 0.5)
		Main.Size = UDim2.new(0, 255, 1, -4)
		Main.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Main.Position = UDim2.new(0, 2, 0.5, 0)
		Main.BorderSizePixel = 2
		Main.BackgroundColor3 = Color3.fromRGB(31, 31, 31)
		Main.Parent = Toast

		local Stroke = Instance.new("UIStroke")
		Stroke.Name = "Stroke"
		Stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		Stroke.LineJoinMode = Enum.LineJoinMode.Miter
		Stroke.Color = Color3.fromRGB(60, 60, 60)
		Stroke.Parent = Main

		local GLine = Instance.new("Frame")
		GLine.Name = "GLine"
		GLine.AnchorPoint = Vector2.new(1, 0.5)
		GLine.Size = UDim2.new(0, 2, 1, 4)
		GLine.BorderColor3 = Color3.fromRGB(0, 0, 0)
		GLine.Position = UDim2.new(0, 0, 0.5, 0)
		GLine.BorderSizePixel = 0
		GLine.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		GLine.Parent = Main

		local Gradient = Instance.new("UIGradient")
		Gradient.Name = "Gradient"
		Gradient.Transparency = NumberSequence.new({
			NumberSequenceKeypoint.new(0, 1),
			NumberSequenceKeypoint.new(0.25, 0),
			NumberSequenceKeypoint.new(0.75, 0),
			NumberSequenceKeypoint.new(1, 1)
		})
		Gradient.Rotation = 90
		Gradient.Parent = GLine

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.AnchorPoint = Vector2.new(0.5, 0.5)
		Title.Size = UDim2.new(1, -10, 1, 0)
		Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0.5, 0, 0.5, 0)
		Title.BorderSizePixel = 0
		Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Title.TextStrokeTransparency = 0.75
		Title.TextSize = 14
		Title.RichText = true
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		Title.Text = "Hit OnlyTwentyCharacters in the Head with AK47"
		Title.FontFace = Font.fromEnum(Enum.Font.SourceSans)
		Title.TextXAlignment = Enum.TextXAlignment.Left
		Title.Parent = Main

		return Toast
	end
}
Bracket.Templates = {
	Screen = function()
		local ScreenInstance = Bracket.Instances:Screen()

		if not Bracket.IsLocal then sethiddenproperty(ScreenInstance, "OnTopOfCoreBlur", true) end
		ScreenInstance.Name = `Bracket {HttpService:GenerateGUID(false)}`
		---[修复] 将 FindFirstChildOfClass 替换为 WaitForChild 来防止竞态条件错误
		ScreenInstance.Parent = Bracket.IsLocal and LocalPlayer:WaitForChild("PlayerGui") or CoreGui

		return ScreenInstance
	end,
	Tooltip = function(Tooltip, ParentElement)
		Tooltip = Bracket.Utilities:GetType(Tooltip, "table", {}, true)
		Tooltip.Text = Bracket.Utilities:GetType(Tooltip.Text, "string", "Tooltip")
		Tooltip.OffsetX = Bracket.Utilities:GetType(Tooltip.OffsetX, "number", 5)
		Tooltip.OffsetY = Bracket.Utilities:GetType(Tooltip.OffsetY, "number", 5)

		local TooltipInstance = Bracket.Instances.Tooltip()

		Tooltip.Type = "Tooltip"
		Tooltip.Instance = TooltipInstance
		--Tooltip.ParentElement = ParentElement -- tables cannot be cyclic

		TooltipInstance.Parent = Bracket.Screen
		TooltipInstance.Text = Tooltip.Text
		TooltipInstance.Size = UDim2.fromOffset(
			TooltipInstance.TextBounds.X + 6,
			TooltipInstance.TextBounds.Y + 6
		)

		TooltipInstance:GetPropertyChangedSignal("TextBounds"):Connect(function()
			TooltipInstance.Size = UDim2.fromOffset(
				TooltipInstance.TextBounds.X + 6,
				TooltipInstance.TextBounds.Y + 6
			)
		end)

		ParentElement.Instance.MouseEnter:Connect(function()
			local Mouse = UserInputService:GetMouseLocation()
			TooltipInstance.Position = UDim2.fromOffset(Mouse.X + Tooltip.OffsetX, Mouse.Y - Tooltip.OffsetY)

			TooltipInstance.Visible = true
		end)
		ParentElement.Instance.MouseLeave:Connect(function()
			TooltipInstance.Visible = false
		end)

		UserInputService.InputChanged:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseMovement and TooltipInstance.Visible then
				local Mouse = Vector2.new(Input.Position.X, Input.Position.Y) + GuiInset -- UserInputService:GetMouseLocation()
				TooltipInstance.Position = UDim2.fromOffset(Mouse.X + Tooltip.OffsetX, Mouse.Y - Tooltip.OffsetY)
			end
		end)

		Tooltip:GetPropertyChangedSignal("Text"):Connect(function(Value)
			TooltipInstance.Text = Value
		end)

		return Tooltip
	end,
	Snowflakes = function(WindowInstance)
		if Bracket.IsLocal then return end
		local ParticleEmitter = loadstring(game:HttpGet("https://raw.githubusercontent.com/AlexR32/rParticle/master/Main.lua"))()
		local Emitter = ParticleEmitter.new(WindowInstance.Background, WindowInstance.Snowflake)
		local NewRandom = Random.new() Emitter.SpawnRate = 20

		Emitter.OnSpawn = function(Particle)
			local RandomPosition = NewRandom:NextNumber()
			local RandomSize = NewRandom:NextInteger(10, 50)
			local RandomYVelocity = NewRandom:NextInteger(10, 50)
			local RandomXVelocity = NewRandom:NextInteger(-50, 50)

			Particle.Object.ImageTransparency = RandomSize / 50
			Particle.Object.Size = UDim2.fromOffset(RandomSize, RandomSize)
			Particle.Velocity = Vector2.new(RandomXVelocity, RandomYVelocity)
			Particle.Position = Vector2.new(RandomPosition * WindowInstance.Background.AbsoluteSize.X, 0)
			Particle.MaxAge = 20 task.wait(0.5) Particle.Object.Visible = true
		end

		Emitter.OnUpdate = function(Particle, Delta)
			Particle.Position += Particle.Velocity * Delta
		end
	end,
	Window = function(Window)
		Window = Bracket.Utilities:GetType(Window, "table", {}, true)
		Window.Enabled = Bracket.Utilities:GetType(Window.Enabled, "boolean", true)
		Window.Name = Bracket.Utilities:GetType(Window.Name, "string", "Window")
		Window.Position = Bracket.Utilities:GetType(Window.Position, "UDim2", UDim2.new(0.5, -248, 0.5, -248))
		Window.Size = Bracket.Utilities:GetType(Window.Size, "UDim2", UDim2.new(0, 496, 0, 496))
		Window.Color = Bracket.Utilities:GetType(Window.Color, "Color3", Color3.new(1, 0.5, 0.25))
		Window.Blur = Bracket.Utilities:GetType(Window.Blur, "boolean", false)
		Window.RainbowSpeed = Bracket.Utilities:GetType(Window.RainbowSpeed, "number", 10)

		local WindowInstance = Bracket.Instances.Window()

		Window.Type = "Window"
		Window.Instance = WindowInstance
		Window.Background = WindowInstance.Background
		---[新功能] 储存窗口的初始位置以供复位
		Window.DefaultPosition = Window.Position
		-- Window.LegacyTabButtons = false
		Window.RainbowHue = 0
		Window.Colorable = {}

		Bracket.Windows[#Bracket.Windows + 1] = Window
		Bracket.Elements[#Bracket.Elements + 1] = Window

		WindowInstance.Parent = Bracket.Screen
		WindowInstance.Visible = Window.Enabled
		WindowInstance.Topbar.Title.Text = Window.Name
		WindowInstance.Position = Window.Position
		WindowInstance.Size = Window.Size

		Bracket.Utilities.MakeDraggable(WindowInstance.Topbar, WindowInstance, function(Position)
			Window.Position = Position
		end)
		Bracket.Utilities.MakeResizeable(WindowInstance.Resize, WindowInstance, Vector2.new(296, 296), Vector2.new(896, 896), function(Size)
			Window.Size = Size
		end)

		-- local Month = tonumber(os.date("%m"))
		-- if Month == 12 or Month == 1 then task.spawn(Bracket.Templates.Snowflakes, WindowInstance) end
		if not Bracket.IsLocal and (Window.Enabled and Window.Blur) then
			RunService:SetRobloxGuiFocused(true)
		end
		if not Window.LegacyTabButtons then
			WindowInstance.TabButtonContainer.ListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
				WindowInstance.TabButtonContainer.CanvasSize = UDim2.fromOffset(WindowInstance.TabButtonContainer.ListLayout.AbsoluteContentSize.X, 0)
			end)
		end

		RunService.RenderStepped:Connect(function()
			Window.RainbowHue = os.clock() % Window.RainbowSpeed / Window.RainbowSpeed
		end)

		Window:GetPropertyChangedSignal("Enabled"):Connect(function(Enabled)
			WindowInstance.Visible = Enabled

			if not Bracket.IsLocal then
				RunService:SetRobloxGuiFocused(Enabled and Window.Blur)
			end
			if not Enabled then
				for Index, Object in pairs(Bracket.Screen:GetChildren()) do
					if Object.Name == "Palette" or Object.Name == "OptionContainer" then
						Object.Visible = false
					end
				end
			end
		end)
		Window:GetPropertyChangedSignal("Blur"):Connect(function(Blur)
			if not Bracket.IsLocal then
				RunService:SetRobloxGuiFocused(Window.Enabled and Blur)
			end
		end)
		Window:GetPropertyChangedSignal("Name"):Connect(function(Name)
			WindowInstance.Topbar.Title.Text = Name
		end)
		Window:GetPropertyChangedSignal("Position"):Connect(function(Position)
			WindowInstance.Position = Position
		end)
		Window:GetPropertyChangedSignal("Size"):Connect(function(Size)
			WindowInstance.Size = Size
		end)
		Window:GetPropertyChangedSignal("Color"):Connect(function(Color)
			for Index, ColorConfig in pairs(Window.Colorable) do
				if ColorConfig[3] then
					if ColorConfig[2] == "RichText" then
						local FormatColor = `rgb({Bracket.Utilities.ColorToString(Color)})`
						ColorConfig[1].Text = ColorConfig[1].Text:gsub("rgb%(%d+, %d+, %d+%)", FormatColor)
						continue
					end

					ColorConfig[1][ColorConfig[2]] = Color
				end
			end
		end)

		return Window
	end,
    -- ... (剩余代码与之前版本相同, 为节省篇幅省略)
    -- ...
}
-- ... (代码中段省略) ...

---[新功能]
-- 创建一个独立的、永远可见的按钮，仅在移动设备上显示，用于开关UI。
-- @param Options (table) - 可选的配置表.
-- @field Position (UDim2) - 按钮的位置.
-- @field Size (UDim2) - 按钮的大小.
-- @field Text (string) - 按钮的文本.
function Bracket:CreateMobileToggleButton(Options)
    if not self.IsMobile then return end -- 如果不是移动设备，则不执行任何操作

    Options = self.Utilities:GetType(Options, "table", {})
    local Position = self.Utilities:GetType(Options.Position, "UDim2", UDim2.new(0, 15, 0, 15))
    local Size = self.Utilities:GetType(Options.Size, "UDim2", UDim2.new(0, 100, 0, 35))
    local Text = self.Utilities:GetType(Options.Text, "string", "Toggle UI")

    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Name = "MobileToggleButton"
    ToggleButton.Parent = self.Screen
    ToggleButton.ZIndex = 10 -- 确保在最顶层
    ToggleButton.Size = Size
    ToggleButton.Position = Position
    ToggleButton.BackgroundColor3 = Color3.fromRGB(31, 31, 31)
    ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleButton.Text = Text
    ToggleButton.Font = Enum.Font.SourceSans
    ToggleButton.TextSize = 16
    ToggleButton.AutoButtonColor = false

    local Stroke = Instance.new("UIStroke")
    Stroke.Color = Color3.fromRGB(63, 63, 63)
    Stroke.Parent = ToggleButton

    ToggleButton.MouseButton1Click:Connect(function()
        for _, window in pairs(self.Windows) do
            window.Enabled = not window.Enabled
        end
    end)
    
    return ToggleButton
end

---[新功能]
-- 创建一个独立的、永远可见的按钮，用于将所有窗口的位置复位到其初始位置。
-- @param Options (table) - 可选的配置表.
-- @field Position (UDim2) - 按钮的位置.
-- @field Size (UDim2) - 按钮的大小.
-- @field Text (string) - 按钮的文本.
function Bracket:CreateResetButton(Options)
    Options = self.Utilities:GetType(Options, "table", {})
    local Position = self.Utilities:GetType(Options.Position, "UDim2", UDim2.new(0, 15, 0, 60))
    local Size = self.Utilities:GetType(Options.Size, "UDim2", UDim2.new(0, 100, 0, 35))
    local Text = self.Utilities:GetType(Options.Text, "string", "Reset UI")

    local ResetButton = Instance.new("TextButton")
    ResetButton.Name = "ResetPositionButton"
    ResetButton.Parent = self.Screen
    ResetButton.ZIndex = 10
    ResetButton.Size = Size
    ResetButton.Position = Position
    ResetButton.BackgroundColor3 = Color3.fromRGB(31, 31, 31)
    ResetButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ResetButton.Text = Text
    ResetButton.Font = Enum.Font.SourceSans
    ResetButton.TextSize = 16
    ResetButton.AutoButtonColor = false

    local Stroke = Instance.new("UIStroke")
    Stroke.Color = Color3.fromRGB(63, 63, 63)
    Stroke.Parent = ResetButton

    ResetButton.MouseButton1Click:Connect(function()
        for _, window in pairs(self.Windows) do
            if window.DefaultPosition then
                window.Position = window.DefaultPosition
            end
        end
        self:ToastNotification({Title = "UI positions have been reset.", Color = Color3.fromRGB(0, 255, 127)})
    end)
    
    return ResetButton
end

function Bracket.Window(Self, Window)
	Window = Bracket.Templates.Window(Window)

	function Window.Tab(Self, Tab)
		Tab = Bracket.Templates.Tab(Tab, Self)

		function Tab.Divider(Self, Divider)
			return Bracket.Templates.Divider(Divider, Self, Window)
		end
		function Tab.Label(Self, Label)
			return Bracket.Templates.Label(Label, Self, Window)
		end
		function Tab.Button(Self, Button)
			return Bracket.Templates.Button(Button, Self, Window)
		end
		function Tab.Toggle(Self, Toggle)
			return Bracket.Templates.Toggle(Toggle, Self, Window)
		end
		function Tab.Slider(Self, Slider)
			return Bracket.Templates.Slider(Slider, Self, Window)
		end
		function Tab.Textbox(Self, Textbox)
			return Bracket.Templates.Textbox(Textbox, Self, Window)
		end
		function Tab.Keybind(Self, Keybind)
			return Bracket.Templates.Keybind(Keybind, Self, Window)
		end
		function Tab.Dropdown(Self, Dropdown)
			return Bracket.Templates.Dropdown(Dropdown, Self, Window)
		end
		function Tab.Colorpicker(Self, Colorpicker)
			return Bracket.Templates.Colorpicker(Colorpicker, Self, Window)
		end
		function Tab.Section(Self, Section)
			Section = Bracket.Templates.Section(Section, Self, Window)

			for Index, Value in pairs(Self.Internal) do
				if table.find(Bracket.SectionInclude, Index) then
					Section.Internal[Index] = Value
				end
			end

			return Section
		end

		return Tab
	end

	return Window
end

-- ... (剩余代码与之前版本相同) ...

function Bracket.ToggleUI(Self, Options)
	Options = Self.Utilities:GetType(Options, "table", {})
	local ToggleKey = Self.Utilities:GetType(Options.Key, "EnumItem", Enum.KeyCode.RightShift)

	UserInputService.InputBegan:Connect(function(Input, GameProcessedEvent)
		if GameProcessedEvent then return end

		if Input.KeyCode == ToggleKey then
			for Index, Window in pairs(Self.Windows) do
				Window.Enabled = not Window.Enabled
			end
		end
	end)
end

if Bracket.IsLocal then
	local virtualWorkspace = {
		--["Testing Config System"] = "[]",
	}

	function isfolder(path)
		print("Folder check", path)
		return true
	end
	function makefolder(path)
		print("Creating folder", path)
	end
	function isfile(path)
		print("File check", path)
		return virtualWorkspace[path]
	end
	function listfiles(path)
		print("Listing files", path)
		local files = {}

		for i,v in virtualWorkspace do
			--if type(v) == "table" then continue end
			files[#files + 1] = i
		end

		return files
	end
	function writefile(path, data)
		virtualWorkspace[path] = data
		print("Writing file", path, data)
	end
	function readfile(path)
		print("Reading file", path)
		return virtualWorkspace[path]
	end
	function delfile(path)
		print("Deleting file", path)
		virtualWorkspace[path] = nil
	end
	function sethiddenproperty(object, prop, value)
		print("Setting property", object, prop, value)
	end
end

-- // Initialize
Bracket.Screen = Bracket.Templates.Screen()
Bracket.Utilities.NoOverwriteProxify(Bracket.Flags, Bracket.Elements)

return Bracket
